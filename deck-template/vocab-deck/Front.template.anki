<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&family=Noto+Serif+JP:wght@200..900&display=swap"
  rel="stylesheet"
/>

<!-- Font switch button -->
<button id="font-switch-btn" class="btn fontSwitch">あ</button>

<!-- Field that contains only the kanji -->
<div id="kanji" class="big-japanese front">{{kanji}}</div>

<!-- Field that contains the kanji with furigana -->
<div id="kanjiWithFurigana" class="big-japanese front" style="display: none">
  {{furigana:kanji_furigana}}
</div>

<!-- toggle button -->
<button id="toggleButton" class="btn front">Show Furigana</button>

<button id="randomExampleButton" class="btn front not-in-back">
  Show another sentence
</button>
<div
  style="
    font-size: 2rem;
    margin: 1.5rem 0;
    max-width: 28ch;
    line-height: 1.5;
    margin-inline: auto;
  "
  id="hintingSentence"
  class="fancy-font not-in-back"
>
  {{ex1_ja}}
</div>

<script>
  // random example sentence sentence for hinting
  function wrapperForRandomExampleFunc() {
    let currentIndex;
    seteRandomExampleOnFront();

    function randomNumberPicker(endNum) {
      return Math.trunc(Math.random() * endNum);
    }

    function seteRandomExampleOnFront() {
      const examples = [
        "{{ex1_ja}}",
        "{{ex2_ja}}",
        "{{ex3_ja}}",
        "{{ex4_ja}}",
        "{{ex5_ja}}",
        "{{ex6_ja}}",
        "{{ex7_ja}}",
        "{{ex8_ja}}",
        "{{ex9_ja}}",
        "{{ex10_ja}}",
      ];
      let randomIndex = randomNumberPicker(examples.length);
      while (randomIndex === currentIndex) {
        randomIndex = randomNumberPicker(examples.length);
      }
      const pickedSentence = examples[randomIndex];
      const hintingSentenceEl = document.getElementById("hintingSentence");
      hintingSentenceEl.innerHTML = pickedSentence;
    }

    function handleRandomSentenceOnFrontBtn() {
      const randomExampleBtn = document.getElementById("randomExampleButton");
      randomExampleBtn.addEventListener("click", seteRandomExampleOnFront);
    }

    handleRandomSentenceOnFrontBtn();
  }

  wrapperForRandomExampleFunc();

  // function to make the switching font work
  function fontSwitch() {
    const FONT_SWITCH_BUTTON = true;

    if (!FONT_SWITCH_BUTTON) return;

    const lsKey = "fancyFont";

    const fontSwitchBtn = document.getElementById("font-switch-btn");

    function setLSAndReturn(lsValue) {
      localStorage.setItem(lsKey, lsValue);
      return lsValue;
    }

    const fancyFontLSStatus =
      localStorage.getItem(lsKey) || setLSAndReturn("true");

    let isFancyFont = fancyFontLSStatus === "true";

    function handleFontUpdate() {
      const targetJPTextEls = [
        ...document.querySelectorAll(".big-japanese"),
        ...document.querySelectorAll(".fancy-font"),
      ];

      // show font change in btn
      fontSwitchBtn.style.fontFamily = !isFancyFont
        ? "MS Mincho, Noto Serif JP, serif"
        : "Noto Sans JP, serif";

      // update fonts in target places
      targetJPTextEls.forEach((element) => {
        element.style.fontFamily = !isFancyFont
          ? "Noto Sans JP, serif"
          : "MS Mincho, Noto Serif JP, serif";

        element.style.fontWeight = !isFancyFont ? "400" : "400";
      });
    }

    // initial check and update
    handleFontUpdate();

    fontSwitchBtn.addEventListener("click", () => {
      isFancyFont = !isFancyFont;
      localStorage.setItem(lsKey, isFancyFont.toString());
      handleFontUpdate();
    });
  }

  fontSwitch();

  // Function to set the display state based on global setting
  function setDisplayState() {
    var kanji = document.getElementById("kanji");
    var kanjiWithFurigana = document.getElementById("kanjiWithFurigana");
    var button = document.getElementById("toggleButton");

    // Get the global state from localStorage
    var furiganaShown = localStorage.getItem("furiganaShown") === "true";

    if (furiganaShown) {
      kanji.style.display = "none";
      kanjiWithFurigana.style.display = "block";
      button.textContent = "Hide Furigana";
    } else {
      kanji.style.display = "block";
      kanjiWithFurigana.style.display = "none";
      button.textContent = "Show Furigana";
    }
  }

  // Set the initial state when the card is loaded
  setDisplayState();

  // Add event listener to toggle button
  document
    .getElementById("toggleButton")
    .addEventListener("click", function () {
      var furiganaShown = localStorage.getItem("furiganaShown") === "true";

      // Toggle the global state
      localStorage.setItem("furiganaShown", !furiganaShown);

      // Update the display state on click
      setDisplayState();
    });
</script>
<script>
  /* AJT Japanese JS 24.10.8.1 */
  /* DO NOT EDIT! This code will be overwritten by AJT Japanese. */
  function ajt__kana_to_moras(text) {
    return text.match(/.[°゚]?[ァィゥェォャュョぁぃぅぇぉゃゅょ]?/gu);
  }
  function ajt__norm_handakuten(text) {
    return text.replace(/\u{b0}/gu, "\u{309a}");
  }
  function ajt__make_pattern(kana, pitch_type, pitch_num) {
    const moras = ajt__kana_to_moras(ajt__norm_handakuten(kana));
    switch (pitch_type) {
      case "atamadaka":
        return (
          `<span class="ajt__HL">${moras[0]}</span>` +
          `<span class="ajt__L">${moras.slice(1).join("")}</span>` +
          `<span class="ajt__pitch_number_tag">1</span>`
        );
        break;
      case "heiban":
        return (
          `<span class="ajt__LH">${moras[0]}</span>` +
          `<span class="ajt__H">${moras.slice(1).join("")}</span>` +
          `<span class="ajt__pitch_number_tag">0</span>`
        );
        break;
      case "odaka":
        return (
          `<span class="ajt__LH">${moras[0]}</span>` +
          `<span class="ajt__HL">${moras.slice(1).join("")}</span>` +
          `<span class="ajt__pitch_number_tag">${moras.length}</span>`
        );
        break;
      case "nakadaka":
        return (
          `<span class="ajt__LH">${moras[0]}</span>` +
          `<span class="ajt__HL">${moras
            .slice(1, Number(pitch_num))
            .join("")}</span>` +
          `<span class="ajt__L">${moras
            .slice(Number(pitch_num))
            .join("")}</span>` +
          `<span class="ajt__pitch_number_tag">${pitch_num}</span>`
        );
        break;
    }
  }
  function ajt__format_new_ruby(kanji, readings) {
    if (readings.length > 1) {
      return `<ruby>${ajt__format_new_ruby(
        kanji,
        readings.slice(0, -1)
      )}</ruby><rt>${readings.slice(-1)}</rt>`;
    } else {
      return `${kanji}<rt>${readings.join("")}</rt>`;
    }
  }
  function ajt__zip(array1, array2) {
    let zipped = [];
    const size = Math.min(array1.length, array2.length);
    for (let i = 0; i < size; i++) {
      zipped.push([array1[i], array2[i]]);
    }
    return zipped;
  }
  function ajt__make_accent_list_item(kana_reading, pitch_accent) {
    const list_item = document.createElement("li");
    for (const [reading_part, pitch_part] of ajt__zip(
      kana_reading.split("・"),
      pitch_accent.split(",")
    )) {
      const [pitch_type, pitch_num] = pitch_part.split("-");
      const pattern = ajt__make_pattern(reading_part, pitch_type, pitch_num);
      list_item.insertAdjacentHTML(
        "beforeend",
        `<span class="ajt__downstep_${pitch_type}">${pattern}</span>`
      );
    }
    return list_item;
  }
  function ajt__make_accents_list(ajt_span) {
    const accents = document.createElement("ul");
    for (const accent_group of ajt_span.getAttribute("pitch").split(" ")) {
      accents.appendChild(
        ajt__make_accent_list_item(...accent_group.split(":"))
      );
    }
    return accents;
  }
  function ajt__make_popup_div(content) {
    const frame_top = document.createElement("div");
    frame_top.classList.add("ajt__frame_title");
    frame_top.innerText = "Information";
    const frame_bottom = document.createElement("div");
    frame_bottom.classList.add("ajt__frame_content");
    frame_bottom.appendChild(content);
    const popup = document.createElement("div");
    popup.classList.add("ajt__info_popup");
    popup.appendChild(frame_top);
    popup.appendChild(frame_bottom);
    return popup;
  }
  function ajt__find_word_info_popup(word_span) {
    return word_span.querySelector(".ajt__info_popup");
  }
  function ajt__find_popup_x_corners(popup_div) {
    const elem_rect = popup_div.getBoundingClientRect();
    const right_corner_x = elem_rect.x + elem_rect.width;
    return {
      x_start: elem_rect.x,
      x_end: right_corner_x,
      shifted_x_start: elem_rect.x + elem_rect.width / 2,
      shifted_x_end: right_corner_x + elem_rect.width / 2,
    };
  }
  function ajt__word_info_on_mouse_enter(word_span) {
    const popup_div = ajt__find_word_info_popup(word_span);
    if (popup_div) {
      ajt__word_info_on_mouse_leave(word_span);
      const x_pos = ajt__find_popup_x_corners(popup_div);
      if (x_pos.x_start < 0) {
        popup_div.classList.add("ajt__left-corner");
        popup_div.style.setProperty(
          "--shift-x",
          `${Math.ceil(-x_pos.x_start)}px`
        );
      } else if (x_pos.shifted_x_end < window.innerWidth) {
        popup_div.classList.add("ajt__in-middle");
      }
    }
  }
  function ajt__word_info_on_mouse_leave(word_span) {
    const popup_div = ajt__find_word_info_popup(word_span);
    if (popup_div) {
      popup_div.classList.remove("ajt__left-corner", "ajt__in-middle");
    }
  }
  function ajt__adjust_popup_position_on_mouse_enter(word_info_span) {
    word_info_span.addEventListener("mouseenter", (event) =>
      ajt__word_info_on_mouse_enter(event.currentTarget)
    );
    word_info_span.addEventListener("mouseleave", (event) =>
      ajt__word_info_on_mouse_leave(event.currentTarget)
    );
  }
  function ajt__format_readings_as_list(readings) {
    const readings_items = readings
      .map((reading) => `<li>${reading}</li>`)
      .join("");
    const list_elem = document.createElement("ol");
    list_elem.classList.add("ajt__readings_list");
    list_elem.insertAdjacentHTML("beforeend", readings_items);
    return list_elem;
  }
  function ajt__find_kanji_readings(ruby_tag) {
    const separators = /[\s;,.、・。]+/iu;
    const kanji = (
      ruby_tag.querySelector("rb") || ruby_tag.firstChild
    ).textContent.trim();
    const readings = ruby_tag
      .querySelector("rt")
      .textContent.split(separators)
      .map((str) => str.trim())
      .filter((str) => str.length);
    return { kanji: kanji, readings: readings };
  }
  function ajt__reformat_multi_furigana() {
    const max_inline = 2;
    document
      .querySelectorAll("ruby:not(ruby ruby):not(.ajt__furigana_list ruby)")
      .forEach((ruby) => {
        try {
          const { kanji, readings } = ajt__find_kanji_readings(ruby);
          if (readings.length > 1) {
            ruby.innerHTML = ajt__format_new_ruby(
              kanji,
              readings.slice(0, max_inline)
            );
          }
          if (
            readings.length > max_inline &&
            !ruby.matches(".ajt__word_info ruby")
          ) {
            const content_ul = ajt__format_readings_as_list(readings);
            const popup = ajt__make_popup_div(content_ul);
            const wrapper = document.createElement("span");
            ruby.replaceWith(wrapper);
            wrapper.appendChild(ruby);
            wrapper.appendChild(popup);
            wrapper.classList.add("ajt__furigana_list");
            ajt__adjust_popup_position_on_mouse_enter(wrapper);
          }
        } catch (error) {
          console.error(error);
        }
      });
  }
  function ajt__create_popups() {
    for (const [idx, span] of document
      .querySelectorAll(".ajt__word_info")
      .entries()) {
      if (span.matches(".jpsentence .background *")) {
        continue;
      }
      if (ajt__find_word_info_popup(span)) {
        continue;
      }
      try {
        const content_ul = ajt__make_accents_list(span);
        const popup = ajt__make_popup_div(content_ul);
        popup.setAttribute("ajt__popup_idx", idx);
        span.setAttribute("ajt__popup_idx", idx);
        span.appendChild(popup);
        ajt__adjust_popup_position_on_mouse_enter(span);
      } catch (error) {
        console.error(error);
      }
    }
  }
  function ajt__main() {
    ajt__create_popups();
    ajt__reformat_multi_furigana();
  }
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", ajt__main);
  } else {
    ajt__main();
  }
</script>
